// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Billing {
  id             Int            @id @default(autoincrement())
  subscriptionId Int
  availableFunds Decimal        @default(0) @db.Decimal(12, 2)
  unitPrice      Decimal        @default(0) @db.Decimal(12, 2)
  createdAt      DateTime
  updatedAt      DateTime
  BillingUsage   BillingUsage[]
}

model BillingUsage {
  id         Int      @id @default(autoincrement())
  billing    Billing  @relation(fields: [billingId], references: [id])
  billingId  Int
  /// start of billing period
  startAt    DateTime
  /// end of billing period
  endAt      DateTime
  /// this is a count of uses
  usageCount Int
  /// this is the monetary value of usage
  usage      Decimal  @default(0) @db.Decimal(12, 2)
  createdAt  DateTime
  updatedAt  DateTime

  @@index([billingId], name: "BillingUsage_billingId")
}

model Contacts {
  id                 Int                 @id @default(autoincrement())
  fullName           String
  email              String
  mobile             String
  handle             String
  tenant             Tenants             @relation(fields: [tenantId], references: [id])
  tenantId           Int
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  ContactGroupsLinks ContactGroupLinks[]

  @@index([tenantId], name: "Contacts_tenantId")
}

model ContactGroupLinks {
  id             Int           @id @default(autoincrement())
  contactGroups  ContactGroups @relation(fields: [contactGroupId], references: [id])
  contactGroupId Int
  contacts       Contacts      @relation(fields: [contactId], references: [id])
  contactId      Int
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt

  @@index([contactGroupId], name: "ContactGroupLinks_contactGroupId")
  @@index([contactId], name: "ContactGroupLinks_contactId")
}

model ContactGroups {
  id                Int                 @id @default(autoincrement())
  name              String
  description       String
  tenant            Tenants             @relation(fields: [tenantId], references: [id])
  tenantId          Int
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  ContactGroupLinks ContactGroupLinks[]

  @@index([tenantId], name: "ContactGroups_tenantId")
}

model LookupCurrencies {
  id                   Int             @id @default(autoincrement())
  // currency iso code e.g. ZAR
  code                 String
  /// compared to US $
  dollar_exchange_rate Decimal         @default(1) @db.Decimal(7, 4)
  updateAt             DateTime        @updatedAt
  Subscriptions        Subscriptions[]
}

model Notifications {
  id                     Int                      @id @default(autoincrement())
  userId                 Int
  entity                 String
  entityId               Int
  type                   String
  status                 StatusTypes              @default(NEW)
  statusMessage          String                   @default("NEW")
  retryCount             Int                      @default(0)
  useSystemPreferences   Boolean                  @default(false)
  createdAt              DateTime                 @default(now())
  updatedAt              DateTime                 @updatedAt
  NotificationRecipients NotificationRecipients[]
  NotificationContent    NotificationContent[]
}

model NotificationRecipients {
  id             Int           @id @default(autoincrement())
  notifications  Notifications @relation(fields: [notificationId], references: [id])
  notificationId Int
  userId         Int
  fullName       String
  email          String
  mobile         String
  handle         String
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt

  @@index([notificationId], name: "NotificationRecipients_notificationId")
}

model NotificationContent {
  id             Int           @id @default(autoincrement())
  notifications  Notifications @relation(fields: [notificationId], references: [id])
  notificationId Int
  contentType    ContentTypes  @default(HTML)
  content        String        @db.Text()
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt

  @@index([notificationId], name: "NotificationContent_notificationId")
}

model Products {
  id             Int              @id @default(autoincrement())
  name           String
  description    String           @db.Text
  unitPrice      Decimal          @default(1) @db.Decimal(7, 4)
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  ProductBundles ProductBundles[]
  Subscriptions  Subscriptions[]
}

model ProductBundles {
  id          Int      @id @default(autoincrement())
  products    Products @relation(fields: [productId], references: [id])
  productId   Int
  name        String
  description String   @db.Text
  unitPrice   Decimal  @default(1) @db.Decimal(7, 4)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([productId], name: "ProductBundles_productId")
}

model Services {
  id               Int          @id @default(autoincrement())
  userId           Int
  type             ServiceTypes @default(SMS)
  provider         ProviderType @default(INFOBIP)
  providerRequest  String       @db.Text
  providerResponse String       @db.Text
  status           StatusTypes  @default(NEW)
  statusMessage    String       @default("NEW")
  retryCount       Int          @default(0)
  jobId            String       @default("")
  jobStatus        JobStatus    @default(NEW)
  request          String       @db.Text
  response         String       @db.Text
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
}

model Subscriptions {
  id         Int              @id @default(autoincrement())
  products   Products         @relation(fields: [productId], references: [id])
  productId  Int
  currency   LookupCurrencies @relation(fields: [currencyId], references: [id])
  currencyId Int
  users      Users            @relation(fields: [userId], references: [id])
  userId     Int
  /// what each unit costs e.g. email = 0,001
  unitPrice  Decimal          @default(0) @db.Decimal(7, 4)
  createdAt  DateTime         @default(now())
  updatedAt  DateTime         @updatedAt

  @@index([productId], name: "Subscriptions_productId")
  @@index([currencyId], name: "Subscriptions_currencyId")
  @@index([userId], name: "Subscriptions_userId")
}

model SystemSettings {
  id        Int      @id @default(autoincrement())
  tenants   Tenants  @relation(fields: [tenantId], references: [id])
  tenantId  Int
  module    String
  setting   String
  value     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Tenants {
  id            Int              @id @default(autoincrement())
  name          String           @default("")
  domain        String
  users         Users            @relation(fields: [userId], references: [id])
  userId        Int
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  Settings      SystemSettings[]
  Contacts      Contacts[]
  ContactGroups ContactGroups[]

  @@index([userId], name: "Tenants_userId")
}

model UniqueLinks {
  id        Int      @id @default(autoincrement())
  users     Users    @relation(fields: [userId], references: [id])
  userId    Int
  linkId    String   @unique
  linkType  LinkType
  urlPath   String
  expiry    DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId], name: "UniqueLinks_userId")
}

model Users {
  id            Int             @id @default(autoincrement())
  email         String          @unique
  name          String
  surname       String
  currency      String          @default("ZAR")
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  UserSecurity  UserSecurity?
  UserRole      UserRoles[]
  UniqueLinks   UniqueLinks[]
  Subscriptions Subscriptions[]
  Tenants       Tenants[]
}

model UserSecurity {
  id           Int      @id @default(autoincrement())
  password     String
  refreshToken String?  @unique
  user         Users    @relation(fields: [userId], references: [id])
  userId       Int      @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@index([userId], name: "UserSecurity_userId")
}

model UserRoles {
  id        Int      @id @default(autoincrement())
  role      String
  user      Users    @relation(fields: [userId], references: [id])
  userId    Int      @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId], name: "UserRoles_userId")
}

enum ContentTypes {
  HTML
  TEXT
}

enum JobStatus {
  FAILED
  NEW
  PROCESSING
  SUCCESS
}

enum ProviderType {
  ELMNTRY
  INFOBIP
}

enum ServiceTypes {
  EMAIL
  SMS
  VIBER
  VOICE
  WHATSAPP
}

enum StatusTypes {
  NEW
  PROCESSING
  COMPLETE
  FAILED
}

enum LinkType {
  RESET_PASSWORD
}
